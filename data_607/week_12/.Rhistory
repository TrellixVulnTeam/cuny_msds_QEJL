library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('gganimate') # visualisation
library('ggExtra') # visualisation
# specific data manipulation
library('lazyeval') # data wrangling
library('broom') # data wrangling
library('purrr') # string manipulation
library('reshape2') # data wrangling
# Text / NLP
library('tidytext') # text analysis
library('tm') # text analysis
library('SnowballC') # text analysis
library('topicmodels') # text analysis
library('wordcloud') # test visualisation
library('igraph') # visualisation
library('ggraph') # visualisation
library('babynames') # names
# Models
library('Matrix')
library('xgboost')
library('caret')
library('treemapify') #visualisation
library(rvest)
library(purrr)
library(lubridate)
library(readr)
library(tidytext)
library(widyr) # pairwise counting
library(gridExtra) #viewing multiple plots together
library(wordcloud2) #creative visualizations
library('readtext')
library(quanteda)
library(RColorBrewer)
#unnest and remove stop, undesirable and short words
df_words_filtered <- df %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
distinct() %>%
filter(!word %in% undesirable_words) %>%
filter(nchar(word) > 3)
full_word_count <- df %>%
unnest_tokens(word, content) %>%
group_by(class_,id) %>%
summarise(num_words = n()) %>%
arrange(desc(num_words))
popular_tfidf_words <- df %>%
unnest_tokens(word, content) %>%
distinct() %>%
filter(!word %in% undesirable_words) %>%
filter(nchar(word) > 3) %>%
count(content, word, sort = TRUE) %>%
ungroup() %>%
bind_tf_idf(word, content, n)
# https://rpubs.com/komalbachhuka/TM_visuals
library(ggthemes)
tdm <- TermDocumentMatrix( corpus, control = list( weighting = weightTf))
p1 <- t1_topics %>%
mutate(topic = paste0("topic", topic)) %>%
spread(topic, beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log10(topic2 / topic1)) %>%
group_by(direction = log_ratio > 0) %>%
top_n(5, abs(log_ratio)) %>%
ungroup() %>%
mutate(term = reorder(term, log_ratio)) %>%
ggplot(aes(term, log_ratio, fill = log_ratio > 0)) +
geom_col() +
theme(legend.position = "none") +
labs(y = "Log ratio of beta in topic 2 / topic 1") +
coord_flip()
freq <-t1 %>%
count(id, word)
t1_tm <- cast_dtm(freq, id, word, n)
t1_tm
inspect(t1_tm[1:5,1:10])
t1 %>%
filter(class == "ham") %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(word, sentiment, sort = TRUE) %>%
ungroup() %>%
group_by(sentiment) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to negative/positive sentiment", x = NULL) +
coord_flip() +
ggtitle("Ham - Sentiment analysis")
t1 %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"), max.words = 50)
p1 <- t1 %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ggplot(aes(class, fill = sentiment)) +
geom_bar(position = "fill")
p2 <- t1 %>%
inner_join(get_sentiments("bing"), by = "word") %>%
group_by(class, id, sentiment) %>%
count() %>%
spread(sentiment, n, fill = 0) %>%
group_by(class, id) %>%
summarise(neg = sum(negative),
pos = sum(positive)) %>%
arrange(id) %>%
mutate(frac_neg = neg/(neg + pos)) %>%
ggplot(aes(frac_neg, fill = class)) +
geom_density(bw = .2, alpha = 0.3) +
theme(legend.position = "right") +
labs(x = "Fraction of negative words per sentence")
print(p1)
print(p2)
t1 %>%
filter(class == "spam") %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(word, sentiment, sort = TRUE) %>%
ungroup() %>%
group_by(sentiment) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to negative/positive sentiment", x = NULL) +
coord_flip() +
ggtitle("Spam - Sentiment analysis")
t3_tf_idf <- t3 %>%
count(class, trigram) %>%
bind_tf_idf(trigram, class, n) %>%
arrange(desc(tf_idf))
t3 <- df %>% select(class, text) %>% unnest_tokens(trigram, text, token = "ngrams", n = 3)
tri_sep <- t3 %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
# for later
trigram_counts <- tri_filt %>%
count(word1, word2, word3, sort = TRUE)
t3 <- tri_filt %>%
unite(trigram, word1, word2, word3, sep = " ")
sample_n(t3, 5)
t3_tf_idf <- t3 %>%
count(class, trigram) %>%
bind_tf_idf(trigram, class, n) %>%
arrange(desc(tf_idf))
t3_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(trigram = factor(trigram, levels = rev(unique(trigram)))) %>%
group_by(class) %>%
top_n(5, tf_idf) %>%
ungroup() %>%
ggplot(aes(trigram, tf_idf, fill = class)) +
geom_col() +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "none") +
facet_wrap(~ class, ncol = 3, scales = "free") +
coord_flip()
install.packages('neo4r')
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(rjson)
library(tidyr)
library(dplyr)
library(jsonlite)
library(xml2)
library(XML)
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(dplyr)
library(RPostgres)
library(DBI)
library(neo4r)
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movie")
df <- dbGetQuery(con, '
SELECT * FROM movie
')
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, '
SELECT * FROM movies
')
df
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, '
/copy (select * from movies) to '/Users/nicholas.chung/Workbench/cuny_msds/data_607/week_12/movies.csv' with csv header
')
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, '
copy (select * from movies) to '/Users/nicholas.chung/Workbench/cuny_msds/data_607/week_12/movies.csv' with csv header
')
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, "
copy (select * from movies) to '/Users/nicholas.chung/Workbench/cuny_msds/data_607/week_12/movies.csv' with csv header
")
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, "
\copy (select * from movies) to '/Users/nicholas.chung/Workbench/cuny_msds/data_607/week_12/movies.csv' with csv header
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='admin'
, password=Sys.getenv("pwd"))
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, "
\copy (select * from movies) to '/Users/nicholas.chung/Workbench/cuny_msds/data_607/week_12/movies.csv' with csv header
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, "
copy (select * from movies) to '/Users/nicholas.chung/Workbench/cuny_msds/data_607/week_12/movies.csv' with csv header
")
# connect to postgresql db
con <- dbConnect(RPostgres::Postgres()
, host='amrepdev.ckxhi71v1dqf.us-east-1.rds.amazonaws.com'
, port='5432'
, dbname='postgres'
, user='nichung'
, password=Sys.getenv("pwd"))
dbExistsTable(con, "movies")
df <- dbGetQuery(con, "
SELECT * FROM movies
")
df
movies <- dbGetQuery(con, "
SELECT * FROM movies
")
movie_ratings <- dbGetQuery(con, "
SELECT * FROM movie_ratings
")
write.csv(movies, "data/movies.csv", row.names = FALSE)
write.csv(movie_ratings, "data/movie_ratings.csv", row.names = FALSE)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = "password"
)
play_movies() %>%
call_neo4j(con)
getwd
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
play_movies() %>%
call_neo4j(con)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$ping()
con <- neo4j_api$new(
url = "http://localhost:7687",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$ping()
con$ping()
con$ping()
con$ping()
con$ping()
con$ping()
con$ping()
con$get_version()
con <- neo4j_api$new(
url = "bolt://localhost:7687",
user = "neo4j",
password = rstudioapi::askForPassword()
)
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(dplyr)
library(RPostgres)
library(DBI)
library(neo4r)
con <- neo4j_api$new(
url = "https://localhost:7473",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$get_version()
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$get_version()
con$ping()
con$get_labels()
con$get_constraints()
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$ping() # ping server
con$get_version() # check neo4j version
on_load_query <- 'CREATE (n:Movies)
SET n = row,
n.movieId = toInteger(row.movieId),
n.title = toString(row.title),
n.releasedate = toDate(row.releasedate),
n.budget = toInteger(row.budget);'
# send the csv
load_csv(url = "data/movies.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query)
on_load_query <- 'CREATE (n:Movies)
SET n = row,
n.movieId = toInteger(row.movieId),
n.title = toString(row.title),
n.releasedate = toDate(row.releasedate),
n.budget = toInteger(row.budget);'
# send the csv
load_csv(url = "data/movies.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$ping() # ping server
con$get_version() # check neo4j version
on_load_query <- 'CREATE (n:Movies)
SET n = row,
n.movieId = toInteger(row.movieId),
n.title = toString(row.title),
n.releasedate = toDate(row.releasedate),
n.budget = toInteger(row.budget);'
# send the csv
load_csv(url = "data/movies.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$ping() # ping server
con$get_version() # check neo4j version
on_load_query <- 'CREATE (n:Movies)
SET n = row,
n.movieId = toInteger(row.movieId),
n.title = toString(row.title),
n.releasedate = toInteger(row.releasedate),
n.budget = toInteger(row.budget);'
# send the csv
load_csv(url = "data/movies.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = rstudioapi::askForPassword()
)
con$ping() # ping server
con$get_version() # check neo4j version
on_load_query <- 'CREATE (n:Movies)
SET n = row,
n.movieId = toInteger(row.movieId),
n.title = toString(row.title),
n.releasedate = toInteger(row.releasedate),
n.budget = toInteger(row.budget);'
# send the csv
load_csv(url = "https://github.com/nichung/cuny_msds/blob/master/data_607/week_12/data/movies.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query)
con$get_labels()
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(dplyr)
library(RPostgres)
library(DBI)
library(neo4r)
library(magrittr)
"MATCH (movies {title: 'midsommar'}) RETURN movies;" %>%
call_neo4j(con)
on_load_query <- 'CREATE (n:Movies)
SET n = row,
n.movieId = toInteger(row.movieId),
n.title = toString(row.title),
n.releasedate = toInteger(row.releasedate),
n.budget = toInteger(row.budget);'
# send the csv
load_csv(url = "https://raw.githubusercontent.com/nichung/cuny_msds/master/data_607/week_12/data/movies.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query)
con$get_labels()
"MATCH (n:Movies) RETURN n LIMIT 25;" %>%
call_neo4j(con)
on_load_query_r <- 'CREATE (n:Ratings)
SET n = row,
n.movieId = toInteger(row.movieId),
n.score1 = toInteger(row.score1),
n.score2 = toInteger(row.score2),
n.score3 = toInteger(row.score3),
n.score4 = toInteger(row.score4),
n.score5 = toInteger(row.score5);'
load_csv(url = "https://raw.githubusercontent.com/nichung/cuny_msds/master/data_607/week_12/data/movie_ratings.csv",
con = con, header = TRUE, periodic_commit = 50,
as = "row", on_load = on_load_query_r)
con$get_labels()
"MATCH (n:Ratings) RETURN n LIMIT 25;" %>%
call_neo4j(con)
"MATCH (n:Movies) RETURN n LIMIT 25;" %>% # get node
call_neo4j(con)
"MATCH (a:Movies),(b:Ratings) WHERE a.Movies = '10121' AND b.Ratings = '10121' CREATE (b)-[a:DESCRIBES]->(a) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.Ratings = '10121' AND b.Movies = '10121' CREATE (a)-[b:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.Ratings = '10121' AND b.Movies = '10121' CREATE (a)-[b:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieId = '10121' AND b.movieId = '10121' CREATE (a)-[b:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10121' AND b.movieid = '10121' CREATE (a)-[b:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (n:Movies) RETURN n LIMIT 25;" %>% # get node
call_neo4j(con)
"MATCH (n:Ratings) RETURN n LIMIT 25;" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10125' AND b.movieid = '10125' CREATE (a)-[r:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10121' AND b.movieid = '10121' CREATE (a)-[r:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10122' AND b.movieid = '10122' CREATE (a)-[r:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10123' AND b.movieid = '10123' CREATE (a)-[r:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10124' AND b.movieid = '10124' CREATE (a)-[r:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
"MATCH (a:Ratings),(b:Movies) WHERE a.movieid = '10126' AND b.movieid = '10126' CREATE (a)-[r:DESCRIBES]->(b) RETURN r" %>%
call_neo4j(con)
